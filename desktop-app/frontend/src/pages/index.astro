---
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Astro Music Player">
    <div id="music-player-container">
        <aside class="sidebar">
            <header class="sidebar-header">
                <h2>Biblioteca üíø</h2>
                <button id="scan" title="Buscar nueva m√∫sica en tu biblioteca">Escanear</button>
            </header>
            <nav>
                <ul id="artist-list">
                    <li class="placeholder">Cargando artistas...</li>
                </ul>
            </nav>
        </aside>

        <main class="main-content">
            <div id="artist-detail-view" class="hidden">
                <header class="artist-header">
                    <div>
                        <h1 id="artist-name"></h1>
                        <p id="artist-bio"></p>
                    </div>
                </header>
                <div class="release-grid-container">
                    <h2>Lanzamientos</h2>
                    <div id="release-grid"></div>
                </div>
            </div>
            <div id="welcome-view" class="welcome-message">
                <h1>Bienvenido a tu reproductor de m√∫sica</h1>
                <p>Selecciona un artista de la barra lateral para ver sus lanzamientos.</p>
            </div>
        </main>

        <footer class="player-bar">
            <div class="track-info">
                <img src="https://placehold.co/64x64/181818/FFFFFF?text=No+Art" alt="Album Art" id="player-artwork" />
                <div>
                    <div id="player-track-title">Selecciona una canci√≥n</div>
                    <div id="player-artist-name">...</div>
                </div>
            </div>
            <div class="player-controls">
                <button>‚è™</button>
                <button class="play-button">‚ñ∂Ô∏è</button>
                <button>‚è©</button>
            </div>
            <div class="scrubber">
                <span>0:00</span>
                <progress value="0" max="100"></progress>
                <span>0:00</span>
            </div>
        </footer>
    </div>
</Layout>

<style>
    :root {
        --bg-color: #121212;
        --sidebar-bg: #000000;
        --card-bg: #181818;
        --text-color: #ffffff;
        --text-secondary: #b3b3b3;
        --accent-color: #1db954;
        --hover-bg: #282828;
    }

    body {
        background-color: var(--bg-color);
        color: var(--text-color);
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    #music-player-container {
        display: grid;
        grid-template-columns: 250px 1fr;
        grid-template-rows: 1fr auto;
        height: 100vh;
        width: 100%;
        overflow: hidden;
    }

    /* --- Sidebar --- */
    .sidebar {
        grid-row: 1 / 2;
        grid-column: 1 / 2;
        background-color: var(--sidebar-bg);
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    .sidebar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .sidebar-header h2 {
        margin: 0;
        font-size: 1.2rem;
    }
    #scan {
        padding: 6px 12px;
        background-color: var(--card-bg);
        border: 1px solid var(--hover-bg);
        color: var(--text-secondary);
        cursor: pointer;
        border-radius: 20px;
        font-size: 0.8rem;
        transition: all 0.2s ease;
    }
    #scan:hover {
        background-color: var(--hover-bg);
        color: var(--text-color);
    }
    #artist-list {
        list-style: none;
        padding: 0;
        margin: 0;
        max-height: calc(100vh - 200px); /* Ajustar altura para permitir scroll */
        overflow-y: auto;
    }
    #artist-list li {
        padding: 0.75rem 0.5rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        color: var(--text-secondary);
        transition:
            background-color 0.2s ease,
            color 0.2s ease;
    }
    #artist-list li:hover {
        background-color: var(--hover-bg);
        color: var(--text-color);
    }
    #artist-list li.active {
        background-color: var(--accent-color);
        color: var(--text-color);
        font-weight: 700;
    }
    #artist-list .placeholder {
        color: var(--text-secondary);
        cursor: default;
    }
    #artist-list::-webkit-scrollbar {
        width: 8px;
    }
    #artist-list::-webkit-scrollbar-thumb {
        background-color: #444;
        border-radius: 4px;
    }

    /* --- Main Content --- */
    .main-content {
        grid-row: 1 / 2;
        grid-column: 2 / 3;
        overflow-y: auto;
        padding: 2rem;
    }
    .hidden {
        display: none !important;
    }
    .welcome-message {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
        text-align: center;
        color: var(--text-secondary);
    }
    .artist-header h1 {
        font-size: 3rem;
        margin-bottom: 0.5rem;
    }
    .artist-header p {
        color: var(--text-secondary);
        max-width: 80ch;
    }
    .release-grid-container {
        margin-top: 2rem;
    }
    .release-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }
    .release-card {
        background-color: var(--card-bg);
        padding: 1rem;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }
    .release-card:hover {
        background-color: var(--hover-bg);
    }
    .release-card img {
        width: 100%;
        aspect-ratio: 1 / 1;
        border-radius: 6px;
        object-fit: cover;
        margin-bottom: 0.75rem;
        background-color: #333; /* Placeholder color */
    }
    .release-card h3 {
        margin: 0;
        font-size: 1rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .release-card p {
        margin: 0.25rem 0 0;
        font-size: 0.85rem;
        color: var(--text-secondary);
    }

    /* --- Player Bar --- */
    .player-bar {
        grid-row: 2 / 3;
        grid-column: 1 / -1; /* Ocupa todo el ancho */
        background-color: var(--card-bg);
        border-top: 1px solid #282828;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.75rem 1rem;
        gap: 2rem;
    }
    .track-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex: 1;
    }
    .track-info img {
        width: 56px;
        height: 56px;
        border-radius: 4px;
    }
    #player-track-title {
        font-weight: 500;
    }
    #player-artist-name {
        font-size: 0.8rem;
        color: var(--text-secondary);
    }

    .player-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex: 1;
        justify-content: center;
    }
    .player-controls button {
        background: none;
        border: none;
        color: var(--text-secondary);
        font-size: 1.5rem;
        cursor: pointer;
        transition: color 0.2s;
    }
    .player-controls button:hover {
        color: var(--text-color);
    }
    .player-controls .play-button {
        font-size: 2.2rem;
        color: var(--text-color);
    }

    .scrubber {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-secondary);
        font-size: 0.75rem;
        flex: 1;
        justify-content: flex-end;
    }
    .scrubber progress {
        width: 100%;
        max-width: 400px;
    }
</style>

<script>
    import { invoke } from "@tauri-apps/api/core";
    import type { Artist, Release, ReleaseType } from "@pkgs/bindings";

    // --- ELEMENTOS DEL DOM ---
    const scanBtn = document.getElementById("scan")! as HTMLButtonElement;
    const artistListEl = document.getElementById("artist-list")!;
    const artistDetailViewEl = document.getElementById("artist-detail-view")!;
    const welcomeViewEl = document.getElementById("welcome-view")!;
    const artistNameEl = document.getElementById("artist-name")!;
    const artistBioEl = document.getElementById("artist-bio")!;
    const releaseGridEl = document.getElementById("release-grid")!;
    const placeholderArtwork = "https://placehold.co/200x200/181818/FFFFFF/png?text=No+Art";

    // --- ESTADO DE LA APLICACI√ìN ---
    let allArtists: Artist[] = [];
    let releaseCache: Record<string, Release[]> = {}; // Cache para no pedir los √°lbumes del mismo artista dos veces
    let currentArtistId: string | null = null;

    // --- L√ìGICA DE LA UI ---

    /**
     * Renderiza la lista de artistas en la barra lateral.
     */
    function renderArtistList() {
        artistListEl.innerHTML = ""; // Limpiar la lista actual
        if (allArtists.length === 0) {
            artistListEl.innerHTML = '<li class="placeholder">No se encontraron artistas. Escanea tu biblioteca.</li>';
            return;
        }

        allArtists.forEach((artist) => {
            const li = document.createElement("li");
            li.textContent = artist.name;
            li.dataset.artistId = artist.id;
            li.addEventListener("click", () => selectArtist(artist.id));
            artistListEl.appendChild(li);
        });
    }

    /**
     * Muestra los detalles de un artista y obtiene sus lanzamientos.
     */
    async function selectArtist(artistId: string) {
        if (currentArtistId === artistId) return; // No hacer nada si ya est√° seleccionado

        currentArtistId = artistId;

        // Actualizar la clase 'active' en la lista
        document.querySelectorAll("#artist-list li").forEach((li) => {
            li.classList.toggle("active", (li as HTMLLIElement).dataset.artistId === artistId);
        });

        // Mostrar la vista de detalle y ocultar el mensaje de bienvenida
        welcomeViewEl.classList.add("hidden");
        artistDetailViewEl.classList.remove("hidden");

        // Buscar el artista en nuestros datos y actualizar la cabecera
        const artist = allArtists.find((a) => a.id === artistId);
        if (artist) {
            artistNameEl.textContent = artist.name;
            artistBioEl.textContent = artist.bio || "Biograf√≠a no disponible.";
        }

        // Obtener y mostrar los lanzamientos
        await fetchAndRenderReleases(artistId);
    }

    /**
     * Convierte el enum ReleaseType en un texto legible.
     */
    function formatReleaseType(type: ReleaseType[]): string {
        // Devuelve el tipo m√°s "importante" o el primero si no hay una jerarqu√≠a clara
        if (type.includes("Album")) return "√Ålbum";
        if (type.includes("EP")) return "EP";
        if (type.includes("Single")) return "Sencillo";
        if (type.includes("Compilation")) return "Compilaci√≥n";
        return "Lanzamiento";
    }

    /**
     * Obtiene (de la cach√© o del backend) y renderiza los lanzamientos de un artista.
     */
    async function fetchAndRenderReleases(artistId: string) {
        releaseGridEl.innerHTML = "<p>Cargando lanzamientos...</p>";

        try {
            // Usar cach√© si est√° disponible
            if (!releaseCache[artistId]) {
                console.log(`Fetching releases for artist ID: ${artistId}`);
                const releases: Release[] = await invoke("get_releases_for_artist", { artistId });
                console.log(`Fetched ${releases.length} releases for artist ID: ${artistId}`);
                releaseCache[artistId] = releases; // Guardar en cach√©
            }

            const releases = releaseCache[artistId];
            renderReleaseGrid(releases);
        } catch (e) {
            releaseGridEl.innerHTML = `<p>Error al obtener los lanzamientos: ${e}</p>`;
            console.error(e);
        }
    }

    /**
     * Renderiza las tarjetas de los lanzamientos en la cuadr√≠cula principal.
     */
    function renderReleaseGrid(releases: Release[]) {
        releaseGridEl.innerHTML = ""; // Limpiar
        if (releases.length === 0) {
            releaseGridEl.innerHTML = "<p>Este artista no tiene lanzamientos en tu biblioteca.</p>";
            return;
        }

        releases.forEach((release) => {
            const card = document.createElement("div");
            card.className = "release-card";

            const artworkPath = release.artworks.length > 0 ? release.artworks[0].path : placeholderArtwork;
            const releaseDate = release.release_date ? new Date(release.release_date).getFullYear() : "N/A";
            const releaseType = formatReleaseType(release.release_type);

            card.innerHTML = `
                <img src="${artworkPath}" alt="Car√°tula de ${release.title}" loading="lazy" onerror="this.src='${placeholderArtwork}'">
                <h3>${release.title}</h3>
                <p>${releaseDate} &bull; ${releaseType}</p>
            `;
            releaseGridEl.appendChild(card);
        });
    }

    // --- INVOCACIONES A TAURI ---

    /**
     * Escanea la biblioteca de m√∫sica.
     */
    const scanLibrary = async () => {
        const originalText = scanBtn.textContent;
        scanBtn.textContent = "Escaneando...";
        scanBtn.disabled = true;

        try {
            await invoke("scan");
            alert("¬°Biblioteca escaneada con √©xito!");
            // Volver a cargar los artistas despu√©s de escanear
            await initializePlayer();
        } catch (e) {
            alert(`Error durante el escaneo: ${e}`);
        } finally {
            scanBtn.textContent = originalText;
            scanBtn.disabled = false;
        }
    };

    /**
     * Carga inicial de los artistas.
     */
    const initializePlayer = async () => {
        artistListEl.innerHTML = '<li class="placeholder">Cargando artistas...</li>';
        try {
            allArtists = await invoke("get_all_artists");
            allArtists.sort((a, b) => a.name.localeCompare(b.name)); // Ordenar artistas alfab√©ticamente
            renderArtistList();
        } catch (e) {
            artistListEl.innerHTML = `<li class="placeholder">Error al cargar artistas: ${e}</li>`;
            console.error(e);
        }
    };

    // --- EVENT LISTENERS ---
    scanBtn.addEventListener("click", scanLibrary);

    // Cargar los artistas cuando el documento est√© listo
    document.addEventListener("DOMContentLoaded", initializePlayer);
</script>
