
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {

}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * La entidad Artista: El creador de la música.
 */
export type Artist = { id: string; name: string; variations: string[]; bio: string | null; sites: string[] }
export type Artwork = { path: string; mime_type: string; description: string | null; hash: string; credits: string | null }
/**
 * Define el género musical (se usa el modelo de Discogs).
 */
export type Genre = "Rock" | "Electronic" | "Pop" | "FolkWorldAndCountry" | "Jazz" | "FunkSoul" | "Classical" | "HipHop" | "Latin" | "StageAndScreen" | "Reggae" | "Blues" | "NonMusic" | "Childrens" | "BrassAndMilitary"
/**
 * El Lanzamiento (Release): El producto que agrupa las pistas.
 */
export type Release = { id: string; title: string; release_type: ReleaseType[]; main_artist_ids: string; release_tracks: string; release_date: string | null; artworks: Artwork[]; genres: Genre[]; styles: Style[] }
/**
 * Define el formato principal del lanzamiento (álbum, EP, etc.).
 */
export type ReleaseType = "Album" | "EP" | "Single" | "Compilation" | "Mix" | "Other"
export type Style = "PopRock" | "House" | "Vocal" | "Experimental" | "Punk" | "AlternativeRock" | "SynthPop" | "Techno" | "IndieRock" | "Ambient" | "Soul" | "Disco" | "Hardcore" | "Folk" | "Ballad" | "Country" | "HardRock" | "Electro" | "RockAndRoll" | "Chanson" | "Romantic" | "Trance" | "HeavyMetal" | "PsychedelicRock" | "FolkRock" | "Jpop" | "Vocaloid" | { Custom: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
